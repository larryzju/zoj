(define (problem-1004 raw-string dst-string)
  
  (define (stack-op-list raw dst stack oplist)
    (if (null? raw)
        (if (equal? dst stack)
            (append (cons #t (vector->list (make-vector (length dst) #\o))) oplist)
            (list #f))
        (if (not (null? stack))
            (if (eqv? (car stack) (car dst))
                (list (stack-op-list raw (cdr dst) (cdr stack) (cons #\o oplist))
                      (stack-op-list (cdr raw) dst (cons (car raw) stack) (cons #\i oplist)))
                (stack-op-list (cdr raw) dst (cons (car raw) stack) (cons #\i oplist)))
            (stack-op-list (cdr raw) dst (cons (car raw) stack) (cons #\i oplist)))))

  (define (format lst)
    (let ((result (make-string (* (length lst) 2) #\Space)))
      (do ((i 0 (+ 1 i)))
          ((>= i (length lst)))
        (string-set! result (* 2 i) (list-ref lst i)))
      result))

        
  (define (filter tree)
    (cond ((null? tree) '())
          ((list? (car tree)) (append (filter (car tree)) (filter (cdr tree))))
          ((eqv? #t (car tree)) (cons (reverse (cdr tree)) (filter (cdr tree))))
          (else (filter (cdr tree)))))

  (let ((result (map format (filter (stack-op-list (string->list raw-string)
                                                   (string->list dst-string)
                                                   '()
                                                   '())))))
    (display #\[)
    (newline)
    (map (lambda (line) (display line) (newline)) (sort result string<))
    (display #\])
    (newline)))

(define (run)
  (let ((a (read)))
    (if (eof-object? a) (exit 0)
        (let ((b (read)))
          (if (eof-object? b) (exit 0)
              (problem-1004 (symbol->string a)
                            (symbol->string b))))))
  (run))
  
(run)
